import React, { useEffect, useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import "./users.css";
import axios from "axios";
import { useHistory } from "react-router-dom";
import { DataGrid, GridActionsCellItem } from "@mui/x-data-grid";
import DeleteIcon from "@material-ui/icons/Delete";
import Container from "@material-ui/core/Container";
import { Box, Modal, TextField } from "@material-ui/core";
import Fade from "@material-ui/core/Fade";
import Backdrop from "@material-ui/core/Backdrop";
const useStyles = makeStyles((theme) => ({
  modal: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  },
  paper: {
    backgroundColor: theme.palette.background.paper,
    border: "2px solid #000",
    boxShadow: theme.shadows[5],
    padding: theme.spacing(2, 4, 3),
  },
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  title: {
    flexGrow: 1,
  },
  overrides: {
    MuiAppBar: {
      colorPrimary: {
        backgroundColor: "#662E9B",
      },
    },
  },
}));

export default function ButtonAppBar() {
  const history = useHistory();
  const token = localStorage.getItem("token");
  if (token === null) {
    history.push("/login");
  }
  const deleteUser = React.useCallback(
    (id) => () => {
      axios
        .delete(`http://127.0.0.1:8000/users/delete?id=` + String(id), {
          headers: {
            Authorization: localStorage.getItem("token"),
          },
        })
        .then((res) => {
          if (res.data.status === 403) {
            localStorage.clear();
          }
        });
      setTimeout(() => {
        setRows((prevRows) => prevRows.filter((row) => row.id !== id));
      });
    },
    []
  );
  const [open, setOpen] = useState(false);
  const [rows, setRows] = useState([]);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const classes = useStyles();
  const columns = React.useMemo(
    () => [
      {
        field: "id",
        headerName: "ID",
        width: 80,
        type: true,
      },
      {
        field: "name",
        headerName: "Name",
        width: 300,
        editable: true,
      },
      {
        field: "email",
        headerName: "Email",
        width: 300,
        editable: true,
      },
      {
        field: "date",
        headerName: "Date",
        width: 300,
        editable: true,
      },
      {
        field: "actions",
        type: "actions",
        width: 150,
        getActions: (params) => [
          <GridActionsCellItem
            icon={<DeleteIcon />}
            label="Delete"
            onClick={deleteUser(params.id)}
          />,
        ],
      },
    ],
    [deleteUser]
  );
  const recuperer = () => {
    axios
      .get(`http://127.0.0.1:8000/users/all`, {
        headers: {
          Authorization: localStorage.getItem("token"),
        },
      })
      .then((res) => {
        if (res.data.status === 403) {
          localStorage.clear();
        } else {
          setRows(res.data.data);
        }
      });
  };

  useEffect(() => {
    axios
      .get(`http://127.0.0.1:8000/users/all  `, {
        headers: {
          Authorization: localStorage.getItem("token"),
        },
      })
      .then((res) => {
        if (res.data.status === 403) {
          localStorage.clear();
        } else {
          setRows(res.data.data);
        }
      });
  }, []);

  const addUser = (event) => {
    event.preventDefault();
    const name = document.getElementById("name").value;
    const email = document.getElementById("email").value;
    const pwd = document.getElementById("pwd").value;
   

    const data = {
      id:0,
      password: pwd,
      email: email,
      name: name,
    };

    axios
      .post(`http://127.0.0.1:8000/signup`, data, {
        headers: {
          Authorization: localStorage.getItem("token"),
        },
      })
      .then((res) => {
        if (res.data.status === 403) {
          localStorage.clear();
        }
      })
      .then(recuperer)
      .then(handleClose);
  };

  return (
    <div className={classes.root}>
      <AppBar style={{ background: "rgb(35, 0, 117)" }} position="static">
        <Toolbar>
          <Typography variant="h6" className={classes.title}>
            Users
          </Typography>
          <Button color="inherit" onClick={handleOpen}>
            Add User{" "}
          </Button>
        </Toolbar>
      </AppBar>
      <br />
      <br />
      <br />
      <Container fixed>
        <DataGrid
          style={{
            height: 500,
            width: "100%",
            backgroundColor: "white",
            padding: 10,
          }}
          rows={rows}
          columns={columns}
          pageSize={7}
        />
      </Container>
      <Modal
        aria-labelledby="transition-modal-title"
        aria-describedby="transition-modal-description"
        className={classes.modal}
        open={open}
        onClose={handleClose}
        closeAfterTransition
        BackdropComponent={Backdrop}
        BackdropProps={{
          timeout: 500,
        }}
      >
        <Fade in={open} style={{ width: "30vw", height: "40vh" }}>
          <div className={classes.paper}>
            <h2 id="transition-modal-title">Add User</h2>
            <br />
            <br />
            <TextField
              style={{ width: "30vw" }}
              id="name"
              className="standard-basic"
              label="Name"
            />
            <br />
            <br />
            <TextField
              style={{ width: "30vw" }}
              id="email"
              className="standard-basic"
              label="Company Email"
              type="email"
            />
            <br />
            <br />
            
            <TextField
              style={{ width: "30vw" }}
              id="pwd"
              className="standard-basic"
              label="Password"
              type="Password"
            />
            <br />
            <br />

            <Button variant="outlined" onClick={addUser}>
              Save
            </Button>
          </div>
        </Fade>
      </Modal>
    </div>
  );
}
