import React, { useEffect, useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import "./vulnerabilities.css";
import Container from '@material-ui/core/Container';
import { Box, Modal, TextField } from "@material-ui/core";
import Fade from '@material-ui/core/Fade';
import Backdrop from '@material-ui/core/Backdrop';
import axios from "axios";
import DeleteIcon from '@material-ui/icons/Delete';
import { DataGrid, GridActionsCellItem } from '@mui/x-data-grid';
import { useHistory } from "react-router-dom";

const useStyles = makeStyles((theme) => ({
  modal: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  paper: {
    backgroundColor: theme.palette.background.paper,
    border: '2px solid #000',
    boxShadow: theme.shadows[5],
    padding: theme.spacing(2, 4, 3),
  },
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  title: {
    flexGrow: 1,
  },
  overrides: {
    MuiAppBar: {
      colorPrimary: {
        backgroundColor: "#662E9B",
      },
    },
  },
}));

export default function ButtonAppBar() {
  const history = useHistory();
  const token = localStorage.getItem("token");
  if (token === null) {
    history.push("/login");
  }
  const deleteUser = React.useCallback(
    (id) => () => {
      axios.delete(`http://127.0.0.1:8000/projects?id=`+String(id), {
        headers: {
          Authorization: localStorage.getItem("token"),
        },
      }).then(res => {
        if (res.data.status === 403) {
          localStorage.clear()
        }
      })
      setTimeout(() => {
        setRows((prevRows) => prevRows.filter((row) => row.id !== id));
      });
    
    },
    [],
  );

  const [open, setOpen] = useState(false);
  const [rows, setRows] = useState([]);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const classes = useStyles();
  const columns = React.useMemo(
    () => [
    
      {
        field: "id",
        headerName: "ID",
        width: 80,
        type: true,
      },
      {
        field: "name",
        headerName: "Name",
        width: 150,
        editable: true,
      },
      {
        field: "createdby",
        headerName: "Created by",
        width: 150,
        editable: true,
      },
      {
        field: "date",
        headerName: "Date",
        width: 150,
        editable: true,
      },
      {
        field: "total",
        headerName: "Total",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: "high",
        headerName: "High",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: "medium",
        headerName: "Medium",
        type: "number",
        width: 150,
        editable: true,
      },
      {
        field: "low",
        headerName: "Low",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: 'actions',
        type: 'actions',
        width: 80,
        getActions: (params) => [
          <GridActionsCellItem
            icon={<DeleteIcon />}
            label="Delete"
            onClick={deleteUser(params.id)}
          />,
          
        ],
      },
    ],
    [deleteUser],
  );
  const recuperer = ()=>{
    axios.get(`http://127.0.0.1:8000/projects`, {
    headers: {
      Authorization: localStorage.getItem("token"),
    },
  }).then(res => {
    if (res.data.status === 403) {
      localStorage.clear()
    }
    else{
      setRows( res.data.data)
    }
  })
  }
  
  useEffect(() => {
    axios.get(`http://127.0.0.1:8000/projects`, {
    headers: {
      Authorization: localStorage.getItem("token"),
    },
  }).then(res => {
    if (res.data.status === 403) {
      localStorage.clear()
    }
    else{
      setRows( res.data.data)
    }
  })

}, [])
  
const addProject = (event) => {
  event.preventDefault();
  const name = document.getElementById("name").value;
  const description = document.getElementById("description").value;
  const dateObject = new Date(Date.now())
  const humanDateFormat = dateObject.toLocaleString()
 
  const data = {
    total: "",
    date: humanDateFormat,
    name: name,
    high: false,
    medium: false,
    low: false,
    description: description
  }


  axios.post(`http://127.0.0.1:8000/projects`, data, {
    headers: {
      Authorization: localStorage.getItem("token"),
    },
  }).then(res => {
    if (res.data.status === 403) {
      localStorage.clear()
    }
  })
  .then(   
    recuperer
  ).then(
    handleClose
  );
  
};
  return (
    <div className={classes.root}>
      <AppBar style={{ background: "rgb(35, 0, 117)" }} position="static">
        <Toolbar color="inherit">
          <Typography variant="h6" className={classes.title}>
            Project
          </Typography>
          <Button color="inherit" onClick={handleOpen}>Add project </Button>
        </Toolbar>
      </AppBar>
      <br /><br /><br />
      <Container fixed >
      <DataGrid 
        style={{ height: 500, width: "100%",backgroundColor: "white",padding:10 }}
        rows={rows}
        columns={columns}
        pageSize={7}
        

       
      />
      </Container>
      <Modal
        aria-labelledby="transition-modal-title"
        aria-describedby="transition-modal-description"
        className={classes.modal}
        open={open}
        onClose={handleClose}
        closeAfterTransition
        BackdropComponent={Backdrop}
        BackdropProps={{
          timeout: 500,
        }}
      >
        <Fade in={open} style={{width: "30vw",height: "40vh",}}>
          <div className={classes.paper}>
            <h2 id="transition-modal-title">Add project</h2>
            <br /><br />
            <TextField
            style={{width: "30vw"}}
              id="name"
              className="standard-basic"
              label="Name"
            />
            <br /><br />
            <TextField
            style={{width: "30vw"}}
              id="description"
              className="standard-basic"
              label="Description"
            />
           <br /><br />
       
            <Button variant="outlined" onClick={addProject } >
              Save
            </Button>
          </div>
          

        </Fade>
      </Modal>
    </div>
  );
}
 