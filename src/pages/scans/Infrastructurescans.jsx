import React, { useEffect, useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Container from '@material-ui/core/Container';
import axios from "axios";
import DeleteIcon from '@material-ui/icons/Delete';
import { DataGrid, GridActionsCellItem } from '@mui/x-data-grid';
import { useHistory } from "react-router-dom";

const useStyles = makeStyles((theme) => ({
  modal: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  paper: {
    backgroundColor: theme.palette.background.paper,
    border: '2px solid #000',
    boxShadow: theme.shadows[5],
    padding: theme.spacing(2, 4, 3),
  },
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  title: {
    flexGrow: 1,
  },
  overrides: {
    MuiAppBar: {
      colorPrimary: {
        backgroundColor: "#662E9B",
      },
    },
  },
}));

export default function Infrastructurescans() {
  const history = useHistory();
  const token = localStorage.getItem("token");
  if (token === null) {
    history.push("/login");
  }
  const deleteUser = React.useCallback(
    (id) => () => {
      axios.delete(`http://127.0.0.1:8000/infrastructures?id=`+String(id), {
        headers: {
          Authorization: localStorage.getItem("token"),
        },
      }).then(res => {
        if (res.data.status === 403) {
          localStorage.clear()
        }
        
      })
      setTimeout(() => {
        setRows((prevRows) => prevRows.filter((row) => row.id !== id));
      });
    
    },
    [],
  );
  const [open, setOpen] = useState(false);
  const [rows, setRows] = useState([]);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const classes = useStyles();
  const columns = React.useMemo(
    () => [
    
      {
        field: "id",
        headerName: "ID",
        width: 80,
        type: true,
      },
      {
        field: "target",
        headerName: "Target",
        width: 150,
        editable: true,
      },
      {
        field: "connector",
        headerName: "Connector",
        width: 150,
        editable: true,
      },
      {
        field: "date",
        headerName: "Date",
        width: 150,
        editable: true,
      },
      {
        field: "total",
        headerName: "Total",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: "high",
        headerName: "High",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: "medium",
        headerName: "Medium",
        type: "number",
        width: 150,
        editable: true,
      },
      {
        field: "low",
        headerName: "Low",
        type: "number",
        width: 110,
        editable: true,
      },
      {
        field: 'actions',
        type: 'actions',
        width: 80,
        getActions: (params) => [
          <GridActionsCellItem
            icon={<DeleteIcon />}
            label="Delete"
            onClick={deleteUser(params.id)}
          />,
          
        ],
      },
    ],
    [deleteUser],
  );

  
  useEffect(() => {
    axios.get(`http://127.0.0.1:8000/infrastructures`, {
    headers: {  
      Authorization: localStorage.getItem("token"),
    },
  }).then(res => {
    if (res.data.status === 403) {
      localStorage.clear()
    }
    else{
      setRows( res.data.data)
    }
  })

}, [])
  

  return (
    <div className={classes.root}>
      <AppBar style={{ background: "rgb(35, 0, 117)" }} position="static">
        <Toolbar color="inherit">
          <Typography variant="h6" className={classes.title}>
          Infrastructure scans
          </Typography>
        </Toolbar>
      </AppBar>
      <br /><br /><br />
      <Container fixed >
      <DataGrid 
        style={{ height: 500, width: "100%",backgroundColor: "white",padding:10 }}
        rows={rows}
        columns={columns}
        pageSize={7}
        

       
      />
      </Container>
    
    </div>
  );
}
 